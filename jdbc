import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Model
class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;
    
    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }
    
    public int getStudentID() { return studentID; }
    public void setStudentID(int studentID) { this.studentID = studentID; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }
    public double getMarks() { return marks; }
    public void setMarks(double marks) { this.marks = marks; }
    
    @Override
    public String toString() {
        return studentID + " | " + name + " | " + department + " | " + marks;
    }
}

// Controller
class StudentController {
    private StudentDAO studentDAO;
    private static final String URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "root";
    private static final String PASS = "your_password";
    
    public StudentController() {
        this.studentDAO = new StudentDAO(URL, USER, PASS);
    }
    
    public void addStudent(Student student) {
        studentDAO.addStudent(student);
    }
    
    public List<Student> getAllStudents() {
        return studentDAO.getAllStudents();
    }
    
    public void updateStudent(Student student) {
        studentDAO.updateStudent(student);
    }
    
    public void deleteStudent(int id) {
        studentDAO.deleteStudent(id);
    }
}

// DAO (Data Access Object) - Part of Controller layer for DB operations
class StudentDAO {
    private String url;
    private String user;
    private String password;
    
    public StudentDAO(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }
    
    public void addStudent(Student student) {
        String sql = "INSERT INTO Student (Name, Department, Marks) VALUES (?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(url, user, password);
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            pstmt.executeUpdate();
            
            try (ResultSet rs = pstmt.getGeneratedKeys()) {
                if (rs.next()) {
                    student.setStudentID(rs.getInt(1));
                }
            }
            System.out.println("Student added with ID: " + student.getStudentID());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM Student";
        try (Connection conn = DriverManager.getConnection(url, user, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            
            while (rs.next()) {
                Student student = new Student(
                    rs.getInt("StudentID"),
                    rs.getString("Name"),
                    rs.getString("Department"),
                    rs.getDouble("Marks")
                );
                students.add(student);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return students;
    }
    
    public void updateStudent(Student student) {
        String sql = "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
        try (Connection conn = DriverManager.getConnection(url, user, password);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            pstmt.setInt(4, student.getStudentID());
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Student updated successfully!");
            } else {
                System.out.println("No student found with that ID.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public void deleteStudent(int id) {
        String sql = "DELETE FROM Student WHERE StudentID = ?";
        try (Connection conn = DriverManager.getConnection(url, user, password);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setInt(1, id);
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Student deleted successfully!");
            } else {
                System.out.println("No student found with that ID.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

// View
class StudentView {
    public void showMenu() {
        System.out.println("\n1. Add Student");
        System.out.println("2. View All Students");
        System.out.println("3. Update Student");
        System.out.println("4. Delete Student");
        System.out.println("5. Exit");
    }
    
    public void displayStudents(List<Student> students) {
        System.out.println("StudentID | Name | Department | Marks");
        System.out.println("-------------------------------------");
        for (Student student : students) {
            System.out.println(student.toString());
        }
    }
    
    public Student getStudentInput(Scanner scanner, String action) {
        System.out.println("\nEnter " + action + " details:");
        System.out.print("Name: ");
        String name = scanner.nextLine();
        System.out.print("Department: ");
        String dept = scanner.nextLine();
        System.out.print("Marks: ");
        double marks = scanner.nextDouble();
        scanner.nextLine();
        
        if (action.equals("update") || action.equals("delete")) {
            System.out.print("StudentID: ");
            int id = scanner.nextInt();
            scanner.nextLine();
            Student student = new Student(id, name, dept, marks);
            return student;
        } else {
            return new Student(0, name, dept, marks);
        }
    }
}

// Main Application
public class StudentManagementApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StudentController controller = new StudentController();
        StudentView view = new StudentView();
        
        int choice;
        do {
            view.showMenu();
            System.out.print("Enter choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();
            
            switch (choice) {
                case 1:
                    Student newStudent = view.getStudentInput(scanner, "new");
                    controller.addStudent(newStudent);
                    break;
                case 2:
                    List<Student> students = controller.getAllStudents();
                    view.displayStudents(students);
                    break;
                case 3:
                    Student updateStudent = view.getStudentInput(scanner, "update");
                    controller.updateStudent(updateStudent);
                    break;
                case 4:
                    Student deleteInput = view.getStudentInput(scanner, "delete");
                    controller.deleteStudent(deleteInput.getStudentID());
                    break;
                case 5:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice!");
            }
        } while (choice != 5);
        
        scanner.close();
    }
}
